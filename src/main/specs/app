{
  "swaggerVersion": "1.2",
  "apiVersion": "1.0",
  "basePath": "https://next.cloud.dreamfactory.com/rest",
  "resourcePath": "/app",
  "produces": [
    "application/json",
    "application/xml"
  ],
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "apis": [
    {
      "path": "/app",
      "operations": [
        {
          "method": "GET",
          "summary": "getContainers() - List all containers.",
          "nickname": "getContainers",
          "type": "ContainersResponse",
          "parameters": [
            {
              "name": "include_properties",
              "description": "Return any properties of the container in the response.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "List the names of the available containers in this storage. Use 'include_properties' to include any properties of the containers."
        },
        {
          "method": "POST",
          "summary": "createContainers() - Create one or more containers.",
          "nickname": "createContainers",
          "type": "ContainersResponse",
          "parameters": [
            {
              "name": "body",
              "description": "Array of containers to create.",
              "allowMultiple": false,
              "type": "ContainersRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "check_exist",
              "description": "If true, the request fails when the container to create already exists.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single container definition or an array of container definitions. Alternatively, override the HTTP Method to pass containers to other actions."
        },
        {
          "method": "DELETE",
          "summary": "deleteContainers() - Delete one or more containers.",
          "nickname": "deleteContainers",
          "type": "ContainersResponse",
          "parameters": [
            {
              "name": "names",
              "description": "List of containers to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all containers, otherwise 'names' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Pass a comma-delimited list of container names to delete. Set 'force' to true to delete all containers. Alternatively, to delete by container records or a large list of names, use the POST request with X-HTTP-METHOD = DELETE header and post containers."
        }
      ],
      "description": "Operations available for File Storage Service."
    },
    {
      "path": "/app/{container}/",
      "operations": [
        {
          "method": "GET",
          "summary": "getContainer() - List the container's content, including properties.",
          "nickname": "getContainer",
          "type": "ContainerResponse",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container from which you want to retrieve contents.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "include_properties",
              "description": "Include any properties of the container in the response.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "include_folders",
              "description": "Include folders in the returned listing.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": true
            },
            {
              "name": "include_files",
              "description": "Include files in the returned listing.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": true
            },
            {
              "name": "full_tree",
              "description": "List the contents of all sub-folders as well.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "zip",
              "description": "Return the content of the folder as a zip file.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use 'include_properties' to get properties of the container. Use the 'include_folders' and/or 'include_files' to modify the listing."
        },
        {
          "method": "POST",
          "summary": "createContainer() - Create container and/or add content.",
          "nickname": "createContainer",
          "type": "ContainerResponse",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container you want to put the contents.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Array of folders and/or files.",
              "allowMultiple": false,
              "type": "ContainerRequest",
              "paramType": "body",
              "required": false
            },
            {
              "name": "url",
              "description": "The full URL of the file to upload.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "extract",
              "description": "Extract an uploaded zip file into the container.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "clean",
              "description": "Option when 'extract' is true, clean the current folder before extracting files and folders.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "check_exist",
              "description": "If true, the request fails when the file or folder to create already exists.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data as an array of folders and/or files."
        },
        {
          "method": "PATCH",
          "summary": "updateContainerProperties() - Update properties of the container.",
          "nickname": "updateContainerProperties",
          "type": "Container",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container you want to put the contents.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "An array of container properties.",
              "allowMultiple": false,
              "type": "Container",
              "paramType": "body",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data as an array of container properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteContainer() - Delete one container and/or its contents.",
          "nickname": "deleteContainer",
          "type": "ContainerResponse",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container you want to delete from.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "force",
              "description": "Set to true to force delete on a non-empty container.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "content_only",
              "description": "Set to true to only delete the content of the container.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Set 'content_only' to true to delete the folders and files contained, but not the container. Set 'force' to true to delete a non-empty container. Alternatively, to delete by a listing of folders and files, use the POST request with X-HTTP-METHOD = DELETE header and post listing."
        }
      ],
      "description": "Operations on containers."
    },
    {
      "path": "/app/{container}/{folder_path}/",
      "operations": [
        {
          "method": "GET",
          "summary": "getFolder() - List the folder's content, including properties.",
          "nickname": "getFolder",
          "type": "FolderResponse",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container from which you want to retrieve contents.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "folder_path",
              "description": "The path of the folder you want to retrieve. This can be a sub-folder, with each level separated by a '/'",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "include_properties",
              "description": "Return any properties of the folder in the response.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "include_folders",
              "description": "Include folders in the returned listing.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": true
            },
            {
              "name": "include_files",
              "description": "Include files in the returned listing.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": true
            },
            {
              "name": "full_tree",
              "description": "List the contents of all sub-folders as well.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "zip",
              "description": "Return the content of the folder as a zip file.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container or folder does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use 'include_properties' to get properties of the folder. Use the 'include_folders' and/or 'include_files' to modify the listing."
        },
        {
          "method": "POST",
          "summary": "createFolder() - Create a folder and/or add content.",
          "nickname": "createFolder",
          "type": "FolderResponse",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container where you want to put the contents.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "folder_path",
              "description": "The path of the folder where you want to put the contents. This can be a sub-folder, with each level separated by a '/'",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Array of folders and/or files.",
              "allowMultiple": false,
              "type": "FolderRequest",
              "paramType": "body",
              "required": false
            },
            {
              "name": "url",
              "description": "The full URL of the file to upload.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "extract",
              "description": "Extract an uploaded zip file into the folder.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "clean",
              "description": "Option when 'extract' is true, clean the current folder before extracting files and folders.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "check_exist",
              "description": "If true, the request fails when the file or folder to create already exists.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data as an array of folders and/or files. Folders are created if they do not exist"
        },
        {
          "method": "PATCH",
          "summary": "updateFolderProperties() - Update folder properties.",
          "nickname": "updateFolderProperties",
          "type": "Folder",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container where you want to put the contents.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "folder_path",
              "description": "The path of the folder you want to update. This can be a sub-folder, with each level separated by a '/'",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Array of folder properties.",
              "allowMultiple": false,
              "type": "Folder",
              "paramType": "body",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container or folder does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post body as an array of folder properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteFolder() - Delete one folder and/or its contents.",
          "nickname": "deleteFolder",
          "type": "FolderResponse",
          "parameters": [
            {
              "name": "container",
              "description": "The name of the container where the folder exists.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "folder_path",
              "description": "The path of the folder where you want to delete contents. This can be a sub-folder, with each level separated by a '/'",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "force",
              "description": "Set to true to force delete on a non-empty folder.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "content_only",
              "description": "Set to true to only delete the content of the folder.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Set 'content_only' to true to delete the sub-folders and files contained, but not the folder. Set 'force' to true to delete a non-empty folder. Alternatively, to delete by a listing of sub-folders and files, use the POST request with X-HTTP-METHOD = DELETE header and post listing."
        }
      ],
      "description": "Operations on folders."
    },
    {
      "path": "/app/{container}/{file_path}",
      "operations": [
        {
          "method": "GET",
          "summary": "getFile() - Download the file contents and/or its properties.",
          "nickname": "getFile",
          "type": "FileResponse",
          "parameters": [
            {
              "name": "container",
              "description": "Name of the container where the file exists.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "file_path",
              "description": "Path and name of the file to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "include_properties",
              "description": "Return properties of the file.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "content",
              "description": "Return the content as base64 of the file, only applies when 'include_properties' is true.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            },
            {
              "name": "download",
              "description": "Prompt the user to download the file from the browser.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "defaultValue": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container, folder, or file does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, the file is streamed to the browser. Use the 'download' parameter to prompt for download. Use the 'include_properties' parameter (optionally add 'content' to include base64 content) to list properties of the file."
        },
        {
          "method": "POST",
          "summary": "createFile() - Create a new file.",
          "nickname": "createFile",
          "type": "FileResponse",
          "parameters": [
            {
              "name": "container",
              "description": "Name of the container where the file exists.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "file_path",
              "description": "Path and name of the file to create.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "check_exist",
              "description": "If true, the request fails when the file to create already exists.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "body",
              "description": "Content and/or properties of the file.",
              "allowMultiple": false,
              "type": "FileRequest",
              "paramType": "body",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container or folder does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post body should be the contents of the file or an object with file properties."
        },
        {
          "method": "PUT",
          "summary": "replaceFile() - Update content of the file.",
          "nickname": "replaceFile",
          "type": "FileResponse",
          "parameters": [
            {
              "name": "container",
              "description": "Name of the container where the file exists.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "file_path",
              "description": "Path and name of the file to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "The content of the file.",
              "allowMultiple": false,
              "type": "FileRequest",
              "paramType": "body",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container, folder, or file does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post body should be the contents of the file."
        },
        {
          "method": "PATCH",
          "summary": "updateFileProperties() - Update properties of the file.",
          "nickname": "updateFileProperties",
          "type": "File",
          "parameters": [
            {
              "name": "container",
              "description": "Name of the container where the file exists.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "file_path",
              "description": "Path and name of the file to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Properties of the file.",
              "allowMultiple": false,
              "type": "File",
              "paramType": "body",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container, folder, or file does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post body should be an array of file properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteFile() - Delete one file.",
          "nickname": "deleteFile",
          "type": "FileResponse",
          "parameters": [
            {
              "name": "container",
              "description": "Name of the container where the file exists.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "file_path",
              "description": "Path and name of the file to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested container, folder, or file does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Careful, this removes the given file from the storage."
        }
      ],
      "description": "Operations on individual files."
    }
  ],
  "models": {
    "Resources": {
      "id": "Resources",
      "properties": {
        "resource": {
          "type": "Array",
          "description": "Array of resources available by this service.",
          "items": {
            "$ref": "Resource"
          }
        }
      }
    },
    "Resource": {
      "id": "Resource",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the resource."
        }
      }
    },
    "Success": {
      "id": "Success",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "True when API call was successful, false or error otherwise."
        }
      }
    },
    "FileRequest": {
      "id": "FileRequest",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the file, localized to requested resource."
        },
        "path": {
          "type": "string",
          "description": "Full path of the file, from the service including container."
        },
        "content_type": {
          "type": "string",
          "description": "The media type of the content of the file."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileResponse": {
      "id": "FileResponse",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the file, localized to requested resource."
        },
        "path": {
          "type": "string",
          "description": "Full path of the file, from the service including container."
        },
        "content_type": {
          "type": "string",
          "description": "The media type of the content of the file."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        },
        "content_length": {
          "type": "string",
          "description": "Size of the file in bytes."
        },
        "last_modified": {
          "type": "string",
          "description": "A GMT date timestamp of when the file was last modified."
        }
      }
    },
    "FolderRequest": {
      "id": "FolderRequest",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the folder, localized to requested resource."
        },
        "path": {
          "type": "string",
          "description": "Full path of the folder, from the service including container."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        },
        "folder": {
          "type": "Array",
          "description": "An array of sub-folders to create.",
          "items": {
            "$ref": "FolderRequest"
          }
        },
        "file": {
          "type": "Array",
          "description": "An array of files to create.",
          "items": {
            "$ref": "FileRequest"
          }
        }
      }
    },
    "FolderResponse": {
      "id": "FolderResponse",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the folder, localized to requested resource."
        },
        "path": {
          "type": "string",
          "description": "Full path of the folder, from the service including container."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        },
        "last_modified": {
          "type": "string",
          "description": "A GMT date timestamp of when the file was last modified."
        },
        "folder": {
          "type": "Array",
          "description": "An array of contained sub-folders.",
          "items": {
            "$ref": "FolderResponse"
          }
        },
        "file": {
          "type": "Array",
          "description": "An array of contained files.",
          "items": {
            "$ref": "FileResponse"
          }
        }
      }
    },
    "ContainerRequest": {
      "id": "ContainerRequest",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the container."
        },
        "path": {
          "type": "string",
          "description": "Same as name for the container, for consistency."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        },
        "folder": {
          "type": "Array",
          "description": "An array of folders to create.",
          "items": {
            "$ref": "FolderRequest"
          }
        },
        "file": {
          "type": "Array",
          "description": "An array of files to create.",
          "items": {
            "$ref": "FileRequest"
          }
        }
      }
    },
    "ContainerResponse": {
      "id": "ContainerResponse",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the container."
        },
        "path": {
          "type": "string",
          "description": "Same as name for the container, for consistency."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        },
        "last_modified": {
          "type": "string",
          "description": "A GMT date timestamp of when the container was last modified."
        },
        "folder": {
          "type": "Array",
          "description": "An array of contained folders.",
          "items": {
            "$ref": "FolderResponse"
          }
        },
        "file": {
          "type": "Array",
          "description": "An array of contained files.",
          "items": {
            "$ref": "FileResponse"
          }
        }
      }
    },
    "File": {
      "id": "File",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the file, localized to requested resource."
        },
        "path": {
          "type": "string",
          "description": "Full path of the file, from the service including container."
        },
        "content_type": {
          "type": "string",
          "description": "The media type of the content of the file."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Folder": {
      "id": "Folder",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the folder, localized to requested resource."
        },
        "path": {
          "type": "string",
          "description": "Full path of the folder, from the service including container."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Container": {
      "id": "Container",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifier/Name for the container."
        },
        "path": {
          "type": "string",
          "description": "Same as name for the container, for consistency."
        },
        "_property_": {
          "type": "string",
          "description": "Storage type specific properties."
        },
        "metadata": {
          "type": "Array",
          "description": "An array of name-value pairs.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ContainersRequest": {
      "id": "ContainersRequest",
      "properties": {
        "container": {
          "type": "Array",
          "description": "An array of containers to modify.",
          "items": {
            "$ref": "Container"
          }
        }
      }
    },
    "ContainersResponse": {
      "id": "ContainersResponse",
      "properties": {
        "container": {
          "type": "Array",
          "description": "An array of containers.",
          "items": {
            "$ref": "Container"
          }
        }
      }
    }
  }
}