{
  "swaggerVersion": "1.2",
  "apiVersion": "1.0",
  "basePath": "https://next.cloud.dreamfactory.com/rest",
  "resourcePath": "/salesforce",
  "produces": [
    "application/json",
    "application/xml"
  ],
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "apis": [
    {
      "path": "/salesforce",
      "operations": [
        {
          "method": "GET",
          "summary": "getTables() - List all tables.",
          "nickname": "getTables",
          "type": "Tables",
          "parameters": [
            {
              "name": "include_properties",
              "description": "Return all properties of the tables, if any.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "names",
              "description": "Comma-delimited list of the table names to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "List the names of the available tables in this storage. By default, all tables are listed, use 'names' parameter to get specific tables. Use 'include_properties' to include any properties of the tables."
        }
      ],
      "description": "Operations available for database tables."
    },
    {
      "path": "/salesforce/{table_name}",
      "operations": [
        {
          "method": "GET",
          "summary": "getRecords() - Retrieve one or more records.",
          "nickname": "getRecords",
          "type": "Records",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the resources to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the resources to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit resources that are returned. Use the 'fields' parameter to limit properties returned for each resource. By default, all fields are returned for all resources. Alternatively, to send the 'ids' or 'filter' as posted data use the POST request with X-HTTP-METHOD = GET header and post array of ids or a filter."
        },
        {
          "method": "POST",
          "summary": "createRecords() - Create one or more records.",
          "nickname": "createRecords",
          "type": "Records",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "Records",
              "paramType": "body",
              "required": true
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success. Use 'fields' parameter to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateRecords() - Update (patch) one or more records.",
          "nickname": "updateRecords",
          "type": "Records",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "Records",
              "paramType": "body",
              "required": true
            },
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the resources to modify.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the resources to modify.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success. Use 'fields' parameter to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteRecords() - Delete one or more records.",
          "nickname": "deleteRecords",
          "type": "Records",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the resources to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the resources to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use 'ids' or filter to delete specific records, otherwise set 'force' to true to clear the table. By default, only the id property of the record is returned on success, use 'fields' to return more info. Alternatively, to delete by records, a complicated filter, or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post array of records, filter, or ids."
        }
      ],
      "description": "Operations for table records administration."
    },
    {
      "path": "/salesforce/{table_name}/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getRecord() - Retrieve one record by identifier.",
          "nickname": "getRecord",
          "type": "Record",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id",
              "description": "Identifier of the resource to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "properties_only",
              "description": "Return just the properties of the record.",
              "allowMultiple": true,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table or record does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' parameter to limit properties that are returned. By default, all fields are returned."
        },
        {
          "method": "POST",
          "summary": "createRecord() - Create one record with given identifier.",
          "nickname": "createRecord",
          "type": "Record",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id",
              "description": "Identifier of the resource to create.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of the record to create.",
              "allowMultiple": false,
              "type": "Record",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields for a single record. Use the 'fields' parameter to return more properties. By default, the id is returned."
        },
        {
          "method": "PATCH",
          "summary": "updateRecord() - Update (patch) one record by identifier.",
          "nickname": "updateRecord",
          "type": "Record",
          "parameters": [
            {
              "name": "table_name",
              "description": "The name of the table you want to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id",
              "description": "Identifier of the resource to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of the fields to update.",
              "allowMultiple": false,
              "type": "Record",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table or record does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields for a single record. Use the 'fields' parameter to return more properties. By default, the id is returned."
        },
        {
          "method": "DELETE",
          "summary": "deleteRecord() - Delete one record by identifier.",
          "nickname": "deleteRecord",
          "type": "Record",
          "parameters": [
            {
              "name": "table_name",
              "description": "Name of the table to perform operations on.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id",
              "description": "Identifier of the resource to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "id_field",
              "description": "Comma-delimited list of the fields used as identifiers or primary keys for the table.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Not Found - Requested table or record does not exist.",
              "code": 404
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' parameter to return more deleted properties. By default, the id is returned."
        }
      ],
      "description": "Operations for single record administration."
    }
  ],
  "models": {
    "Resources": {
      "id": "Resources",
      "properties": {
        "resource": {
          "type": "Array",
          "description": "Array of resources available by this service.",
          "items": {
            "$ref": "Resource"
          }
        }
      }
    },
    "Resource": {
      "id": "Resource",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the resource."
        }
      }
    },
    "Success": {
      "id": "Success",
      "properties": {
        "success": {
          "type": "boolean",
          "description": "True when API call was successful, false or error otherwise."
        }
      }
    },
    "Tables": {
      "id": "Tables",
      "properties": {
        "table": {
          "type": "Array",
          "description": "Array of tables and their properties.",
          "items": {
            "$ref": "Table"
          }
        }
      }
    },
    "Table": {
      "id": "Table",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the table."
        },
        "_property_": {
          "type": "string",
          "description": "DB type specific property name-value pairs."
        }
      }
    },
    "Records": {
      "id": "Records",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of records of the given resource.",
          "items": {
            "$ref": "Record"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Available metadata for the response."
        }
      }
    },
    "Record": {
      "id": "Record",
      "properties": {
        "_field_": {
          "type": "string",
          "description": "Array of DB table specific field name-value pairs."
        }
      }
    }
  }
}