{
  "swaggerVersion": "1.2",
  "apiVersion": "1.0",
  "basePath": "https://next.cloud.dreamfactory.com/rest",
  "resourcePath": "/system",
  "produces": [
    "application/json",
    "application/xml"
  ],
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "apis": [
    {
      "path": "/system",
      "operations": [
        {
          "method": "GET",
          "summary": "getResources() - List resources available for system management.",
          "nickname": "getResources",
          "type": "Resources",
          "notes": "See listed operations for each resource available."
        }
      ],
      "description": "Operations available for system management."
    },
    {
      "path": "/system/app",
      "operations": [
        {
          "method": "GET",
          "summary": "getApps() - Retrieve one or more applications.",
          "nickname": "getApps",
          "type": "AppsResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "POST",
          "summary": "createApps() - Create one or more applications.",
          "nickname": "createApps",
          "type": "AppsResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "AppsRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateApps() - Update one or more applications.",
          "nickname": "updateApps",
          "type": "AppsResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "AppsRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteApps() - Delete one or more applications.",
          "nickname": "deleteApps",
          "type": "AppsResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "delete_storage",
              "description": "If the app is hosted in a storage service, the storage will be deleted as well.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for application administration."
    },
    {
      "path": "/system/app/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getApp() - Retrieve one application.",
          "nickname": "getApp",
          "type": "AppResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "pkg",
              "description": "Download this app as a DreamFactory package file.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_files",
              "description": "If 'pkg' is true, include hosted files in the package.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_services",
              "description": "If 'pkg' is true, include associated services configuration in the package.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "If 'pkg' is true, include associated database schema in the package.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "sdk",
              "description": "Download the DreamFactory Javascript SDK amended for this app.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "PATCH",
          "summary": "updateApp() - Update one application.",
          "nickname": "updateApp",
          "type": "AppResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of fields to update.",
              "allowMultiple": false,
              "type": "AppRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteApp() - Delete one application.",
          "nickname": "deleteApp",
          "type": "AppResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "delete_storage",
              "description": "If the app is hosted in a storage service, the storage will be deleted as well.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": " By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual application administration."
    },
    {
      "path": "/system/app_group",
      "operations": [
        {
          "method": "GET",
          "summary": "getAppGroups() - Retrieve one or more application groups.",
          "nickname": "getAppGroups",
          "type": "AppGroupsResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "POST",
          "summary": "createAppGroups() - Create one or more application groups.",
          "nickname": "createAppGroups",
          "type": "AppGroupsResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "AppGroupsRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateAppGroups() - Update one or more application groups.",
          "nickname": "updateAppGroups",
          "type": "AppGroupsResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "AppGroupsRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteAppGroups() - Delete one or more application groups.",
          "nickname": "deleteAppGroups",
          "type": "AppGroupsResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for application group administration."
    },
    {
      "path": "/system/app_group/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getAppGroup() - Retrieve one application group.",
          "nickname": "getAppGroup",
          "type": "AppGroupResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "PATCH",
          "summary": "updateAppGroup() - Update one application group.",
          "nickname": "updateAppGroup",
          "type": "AppGroupResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of fields to update.",
              "allowMultiple": false,
              "type": "AppGroupRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteAppGroup() - Delete one application group.",
          "nickname": "deleteAppGroup",
          "type": "AppGroupResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual application group administration."
    },
    {
      "path": "/system/config",
      "operations": [
        {
          "method": "GET",
          "summary": "getConfig() - Retrieve system configuration properties.",
          "nickname": "getConfig",
          "type": "ConfigResponse",
          "notes": "The retrieved properties control how the system behaves."
        },
        {
          "method": "POST",
          "summary": "setConfig() - Update one or more system configuration properties.",
          "nickname": "setConfig",
          "type": "ConfigResponse",
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of properties to set.",
              "allowMultiple": false,
              "type": "ConfigRequest",
              "paramType": "body",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of properties."
        }
      ],
      "description": "Operations for system configuration options."
    },
    {
      "path": "/system/constant",
      "operations": [
        {
          "method": "GET",
          "summary": "getConstants() - Retrieve all platform enumerated constants.",
          "nickname": "getConstants",
          "type": "Constants",
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Returns an object containing every enumerated type and its constant values"
        }
      ],
      "description": "Operations for retrieving platform constants."
    },
    {
      "path": "/system/constant/{type}",
      "operations": [
        {
          "method": "GET",
          "summary": "getConstant() - Retrieve one constant type enumeration.",
          "nickname": "getConstant",
          "type": "Constant",
          "parameters": [
            {
              "name": "type",
              "description": "Identifier of the enumeration type to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Returns , all fields and no relations are returned."
        }
      ],
      "description": "Operations for retrieval individual platform constant enumerations."
    },
    {
      "path": "/system/custom",
      "operations": [
        {
          "method": "GET",
          "summary": "getCustomSettings() - Retrieve all custom system settings.",
          "nickname": "getCustomSettings",
          "type": "CustomSettings",
          "responseMessages": [
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Returns an object containing name-value pairs for custom system settings"
        },
        {
          "method": "POST",
          "summary": "setCustomSettings() - Update one or more custom system settings.",
          "nickname": "setCustomSettings",
          "type": "Success",
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of desired settings.",
              "allowMultiple": false,
              "type": "CustomSettings",
              "paramType": "body",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "A valid session and system configuration permissions is required to edit settings. Post body should be an array of name-value pairs."
        }
      ],
      "description": "Operations for managing custom system settings."
    },
    {
      "path": "/system/custom/{setting}",
      "operations": [
        {
          "method": "GET",
          "summary": "getCustomSetting() - Retrieve one custom system setting.",
          "nickname": "getCustomSetting",
          "type": "CustomSetting",
          "parameters": [
            {
              "name": "setting",
              "description": "Name of the setting to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Setting will be returned as an object containing name-value pair."
        },
        {
          "method": "DELETE",
          "summary": "deleteCustomSetting() - Delete one custom setting.",
          "nickname": "deleteCustomSetting",
          "type": "Success",
          "parameters": [
            {
              "name": "setting",
              "description": "Name of the setting to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            }
          ],
          "responseMessages": [
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "Denied Access - No permission.",
              "code": 403
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "A valid session with system configuration permissions is required to delete settings."
        }
      ],
      "description": "Operations for individual custom system settings."
    },
    {
      "path": "/system/device",
      "operations": [
        {
          "method": "GET",
          "summary": "getDevices() - Retrieve one or more devices.",
          "nickname": "getDevices",
          "type": "DevicesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "DELETE",
          "summary": "deleteDevices() - Delete one or more devices.",
          "nickname": "deleteDevices",
          "type": "DevicesResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for device administration."
    },
    {
      "path": "/system/device/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getDevice() - Retrieve one device.",
          "nickname": "getDevice",
          "type": "DeviceResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "DELETE",
          "summary": "deleteDevice() - Delete one device.",
          "nickname": "deleteDevice",
          "type": "DeviceResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual device administration."
    },
    {
      "path": "/system/email_template",
      "operations": [
        {
          "method": "GET",
          "summary": "getEmailTemplates() - Retrieve one or more email templates.",
          "nickname": "getEmailTemplates",
          "type": "EmailTemplatesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "POST",
          "summary": "createEmailTemplates() - Create one or more email templates.",
          "nickname": "createEmailTemplates",
          "type": "EmailTemplatesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "EmailTemplatesRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateEmailTemplates() - Update one or more email templates.",
          "nickname": "updateEmailTemplates",
          "type": "EmailTemplatesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "EmailTemplatesRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteEmailTemplates() - Delete one or more email templates.",
          "nickname": "deleteEmailTemplates",
          "type": "EmailTemplatesResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for email template administration."
    },
    {
      "path": "/system/email_template/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getEmailTemplate() - Retrieve one email template.",
          "nickname": "getEmailTemplate",
          "type": "EmailTemplateResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "PATCH",
          "summary": "updateEmailTemplate() - Update one email template.",
          "nickname": "updateEmailTemplate",
          "type": "EmailTemplateResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of fields to update.",
              "allowMultiple": false,
              "type": "EmailTemplateRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteEmailTemplate() - Delete one email template.",
          "nickname": "deleteEmailTemplate",
          "type": "EmailTemplateResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual email template administration."
    },
    {
      "path": "/system/role",
      "operations": [
        {
          "method": "GET",
          "summary": "getRoles() - Retrieve one or more roles.",
          "nickname": "getRoles",
          "type": "RolesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "POST",
          "summary": "createRoles() - Create one or more roles.",
          "nickname": "createRoles",
          "type": "RolesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "RolesRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateRoles() - Update one or more roles.",
          "nickname": "updateRoles",
          "type": "RolesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "RolesRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteRoles() - Delete one or more roles.",
          "nickname": "deleteRoles",
          "type": "RolesResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for role administration."
    },
    {
      "path": "/system/role/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getRole() - Retrieve one role.",
          "nickname": "getRole",
          "type": "RoleResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "PATCH",
          "summary": "updateRole() - Update one role.",
          "nickname": "updateRole",
          "type": "RoleResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of fields to update.",
              "allowMultiple": false,
              "type": "RoleRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteRole() - Delete one role.",
          "nickname": "deleteRole",
          "type": "RoleResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual role administration."
    },
    {
      "path": "/system/service",
      "operations": [
        {
          "method": "GET",
          "summary": "getServices() - Retrieve one or more services.",
          "nickname": "getServices",
          "type": "ServicesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "POST",
          "summary": "createServices() - Create one or more services.",
          "nickname": "createServices",
          "type": "ServicesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "ServicesRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateServices() - Update one or more services.",
          "nickname": "updateServices",
          "type": "ServicesResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "ServicesRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteServices() - Delete one or more services.",
          "nickname": "deleteServices",
          "type": "ServicesResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for service administration."
    },
    {
      "path": "/system/service/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getService() - Retrieve one service.",
          "nickname": "getService",
          "type": "ServiceResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "PATCH",
          "summary": "updateService() - Update one service.",
          "nickname": "updateService",
          "type": "ServiceResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of fields to update.",
              "allowMultiple": false,
              "type": "ServiceRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteService() - Delete one service.",
          "nickname": "deleteService",
          "type": "ServiceResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual service administration."
    },
    {
      "path": "/system/user",
      "operations": [
        {
          "method": "GET",
          "summary": "getUsers() - Retrieve one or more users.",
          "nickname": "getUsers",
          "type": "UsersResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to retrieve.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "filter",
              "description": "SQL-like filter to limit the records to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "limit",
              "description": "Set to limit the filter results.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "order",
              "description": "SQL-like order containing field and direction for filter results.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "offset",
              "description": "Set to offset the filter results to a particular record count.",
              "allowMultiple": false,
              "type": "integer",
              "format": "int32",
              "paramType": "query",
              "required": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to retrieve for each record.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_count",
              "description": "Include the total number of filter results in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "include_schema",
              "description": "Include the schema of the table queried in returned metadata.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false
            },
            {
              "name": "file",
              "description": "Download the results of the request as a file.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids."
        },
        {
          "method": "POST",
          "summary": "createUsers() - Create one or more users.",
          "nickname": "createUsers",
          "type": "UsersResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to create.",
              "allowMultiple": false,
              "type": "UsersRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "X-HTTP-METHOD",
              "description": "Override request using POST to tunnel other http request, such as DELETE.",
              "enum": [
                "GET",
                "PUT",
                "PATCH",
                "DELETE"
              ],
              "allowMultiple": false,
              "type": "string",
              "paramType": "header",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "PATCH",
          "summary": "updateUsers() - Update one or more users.",
          "nickname": "updateUsers",
          "type": "UsersResponse",
          "consumes": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "produces": [
            "application/json",
            "application/xml",
            "text/csv"
          ],
          "parameters": [
            {
              "name": "body",
              "description": "Data containing name-value pairs of records to update.",
              "allowMultiple": false,
              "type": "UsersRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be a single record or an array of records (shown). By default, only the id property of the record is returned on success, use 'fields' and 'related' to return more info."
        },
        {
          "method": "DELETE",
          "summary": "deleteUsers() - Delete one or more users.",
          "nickname": "deleteUsers",
          "type": "UsersResponse",
          "parameters": [
            {
              "name": "ids",
              "description": "Comma-delimited list of the identifiers of the records to delete.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "force",
              "description": "Set force to true to delete all records in this table, otherwise 'ids' parameter is required.",
              "allowMultiple": false,
              "type": "boolean",
              "paramType": "query",
              "required": false,
              "default": false
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related names to return for each record affected.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id property of the record deleted is returned on success. Use 'fields' and 'related' to return more properties of the deleted records. <br>Alternatively, to delete by record or a large list of ids, use the POST request with X-HTTP-METHOD = DELETE header and post records or ids."
        }
      ],
      "description": "Operations for user administration."
    },
    {
      "path": "/system/user/{id}",
      "operations": [
        {
          "method": "GET",
          "summary": "getUser() - Retrieve one user.",
          "nickname": "getUser",
          "type": "UserResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to retrieve.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned."
        },
        {
          "method": "PATCH",
          "summary": "updateUser() - Update one user.",
          "nickname": "updateUser",
          "type": "UserResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to update.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "body",
              "description": "Data containing name-value pairs of fields to update.",
              "allowMultiple": false,
              "type": "UserRequest",
              "paramType": "body",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties."
        },
        {
          "method": "DELETE",
          "summary": "deleteUser() - Delete one user.",
          "nickname": "deleteUser",
          "type": "UserResponse",
          "parameters": [
            {
              "name": "id",
              "description": "Identifier of the record to delete.",
              "allowMultiple": false,
              "type": "string",
              "paramType": "path",
              "required": true
            },
            {
              "name": "fields",
              "description": "Comma-delimited list of field names to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            },
            {
              "name": "related",
              "description": "Comma-delimited list of related records to return.",
              "allowMultiple": true,
              "type": "string",
              "paramType": "query",
              "required": false
            }
          ],
          "responseMessages": [
            {
              "message": "Bad Request - Request does not have a valid format, all required parameters, etc.",
              "code": 400
            },
            {
              "message": "Unauthorized Access - No currently valid session available.",
              "code": 401
            },
            {
              "message": "System Error - Specific reason is included in the error message.",
              "code": 500
            }
          ],
          "notes": "By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return deleted properties."
        }
      ],
      "description": "Operations for individual user administration."
    }
  ],
  "models": {
    "AppRequest": {
      "id": "AppRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this application."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this application."
        },
        "api_name": {
          "type": "string",
          "description": "Name of the application to use in API transactions."
        },
        "description": {
          "type": "string",
          "description": "Description of this application."
        },
        "is_active": {
          "type": "boolean",
          "description": "Is this system application active for use."
        },
        "url": {
          "type": "string",
          "description": "URL for accessing this application."
        },
        "is_url_external": {
          "type": "boolean",
          "description": "True when this application is hosted elsewhere, but available in Launchpad."
        },
        "import_url": {
          "type": "string",
          "description": "If hosted and imported, the url of zip or package file where the code originated."
        },
        "storage_service_id": {
          "type": "string",
          "description": "If hosted, the storage service identifier."
        },
        "storage_container": {
          "type": "string",
          "description": "If hosted, the container of the storage service."
        },
        "requires_fullscreen": {
          "type": "boolean",
          "description": "True when this app needs to hide launchpad."
        },
        "allow_fullscreen_toggle": {
          "type": "boolean",
          "description": "True to allow launchpad access via toggle."
        },
        "toggle_location": {
          "type": "string",
          "description": "Screen location for toggle placement."
        },
        "requires_plugin": {
          "type": "boolean",
          "description": "True when the app relies on a browser plugin."
        },
        "roles_default_app": {
          "type": "Array",
          "description": "Related roles by Role.default_app_id.",
          "items": {
            "type": "string"
          }
        },
        "users_default_app": {
          "type": "Array",
          "description": "Related users by User.default_app_id.",
          "items": {
            "type": "string"
          }
        },
        "app_groups": {
          "type": "Array",
          "description": "Related groups by app to group assignment.",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "Array",
          "description": "Related roles by app to role assignment.",
          "items": {
            "type": "string"
          }
        },
        "services": {
          "type": "Array",
          "description": "Related services by app to service assignment.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AppResponse": {
      "id": "AppResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this application."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this application."
        },
        "api_name": {
          "type": "string",
          "description": "Name of the application to use in API transactions."
        },
        "description": {
          "type": "string",
          "description": "Description of this application."
        },
        "is_active": {
          "type": "boolean",
          "description": "Is this system application active for use."
        },
        "url": {
          "type": "string",
          "description": "URL for accessing this application."
        },
        "is_url_external": {
          "type": "boolean",
          "description": "True when this application is hosted elsewhere, but available in Launchpad."
        },
        "import_url": {
          "type": "string",
          "description": "If hosted and imported, the url of zip or package file where the code originated."
        },
        "storage_service_id": {
          "type": "string",
          "description": "If hosted, the storage service identifier."
        },
        "storage_container": {
          "type": "string",
          "description": "If hosted, the container of the storage service."
        },
        "requires_fullscreen": {
          "type": "boolean",
          "description": "True when this app needs to hide launchpad."
        },
        "allow_fullscreen_toggle": {
          "type": "boolean",
          "description": "True to allow launchpad access via toggle."
        },
        "toggle_location": {
          "type": "string",
          "description": "Screen location for toggle placement."
        },
        "requires_plugin": {
          "type": "boolean",
          "description": "True when the app relies on a browser plugin."
        },
        "roles_default_app": {
          "type": "Array",
          "description": "Related roles by Role.default_app_id.",
          "items": {
            "type": "string"
          }
        },
        "users_default_app": {
          "type": "Array",
          "description": "Related users by User.default_app_id.",
          "items": {
            "type": "string"
          }
        },
        "app_groups": {
          "type": "Array",
          "description": "Related groups by app to group assignment.",
          "items": {
            "type": "string"
          }
        },
        "roles": {
          "type": "Array",
          "description": "Related roles by app to role assignment.",
          "items": {
            "type": "string"
          }
        },
        "services": {
          "type": "Array",
          "description": "Related services by app to service assignment.",
          "items": {
            "type": "string"
          }
        },
        "created_date": {
          "type": "string",
          "description": "Date this application was created.",
          "readOnly": true
        },
        "created_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who created this application.",
          "readOnly": true
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this application was last modified.",
          "readOnly": true
        },
        "last_modified_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who last modified this application.",
          "readOnly": true
        }
      }
    },
    "AppsRequest": {
      "id": "AppsRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system application records.",
          "items": {
            "$ref": "AppRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system application record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "AppsResponse": {
      "id": "AppsResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system application records.",
          "items": {
            "$ref": "AppResponse"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    },
    "Metadata": {
      "id": "Metadata",
      "properties": {
        "schema": {
          "type": "Array",
          "description": "Array of table schema.",
          "items": {
            "$ref": "string"
          }
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Record count returned for GET requests."
        }
      }
    },
    "AppGroupRequest": {
      "id": "AppGroupRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this application group."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this application group."
        },
        "description": {
          "type": "string",
          "description": "Description of this application group."
        },
        "apps": {
          "type": "Array",
          "description": "Related apps by app to group assignment.",
          "items": {
            "$ref": "App"
          }
        }
      }
    },
    "AppGroupResponse": {
      "id": "AppGroupResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this application group."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this application group."
        },
        "description": {
          "type": "string",
          "description": "Description of this application group."
        },
        "apps": {
          "type": "Array",
          "description": "Related apps by app to group assignment.",
          "items": {
            "$ref": "App"
          }
        },
        "created_date": {
          "type": "string",
          "description": "Date this application group was created."
        },
        "created_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who created this application group."
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this application group was last modified."
        },
        "last_modified_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who last modified this application group."
        }
      }
    },
    "AppGroupsRequest": {
      "id": "AppGroupsRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system application group records.",
          "items": {
            "$ref": "AppGroupRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "AppGroupsResponse": {
      "id": "AppGroupsResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system application group records.",
          "items": {
            "$ref": "AppGroupResponse"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    },
    "ConfigRequest": {
      "id": "ConfigRequest",
      "properties": {
        "open_reg_role_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default Role Id assigned to newly registered users, set to null to turn off open registration."
        },
        "open_reg_email_service_id": {
          "type": "integer",
          "format": "int32",
          "description": "Set to an email-type service id to require email confirmation of newly registered users."
        },
        "open_reg_email_template_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default email template used for open registration email confirmations."
        },
        "invite_email_service_id": {
          "type": "integer",
          "format": "int32",
          "description": "Set to an email-type service id to allow user invites and invite confirmations via email service."
        },
        "invite_email_template_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default email template used for user invitations and confirmations via email service."
        },
        "password_email_service_id": {
          "type": "integer",
          "format": "int32",
          "description": "Set to an email-type service id to require email confirmation to reset passwords, otherwise defaults to security question and answer."
        },
        "password_email_template_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default email template used for password reset email confirmations."
        },
        "guest_role_id": {
          "type": "integer",
          "format": "int32",
          "description": "Role Id assigned for all guest sessions, set to null to require authenticated sessions."
        },
        "editable_profile_fields": {
          "type": "string",
          "description": "Comma-delimited list of fields the user is allowed to edit."
        },
        "allowed_hosts": {
          "type": "Array",
          "description": "CORS whitelist of allowed remote hosts.",
          "items": {
            "$ref": "HostInfo"
          }
        }
      }
    },
    "ConfigResponse": {
      "id": "ConfigResponse",
      "properties": {
        "open_reg_role_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default Role Id assigned to newly registered users, set to null to turn off open registration."
        },
        "open_reg_email_service_id": {
          "type": "integer",
          "format": "int32",
          "description": "Set to an email-type service id to require email confirmation of newly registered users."
        },
        "open_reg_email_template_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default email template used for open registration email confirmations."
        },
        "invite_email_service_id": {
          "type": "integer",
          "format": "int32",
          "description": "Set to an email-type service id to allow user invites and invite confirmations via email service."
        },
        "invite_email_template_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default email template used for user invitations and confirmations via email service."
        },
        "password_email_service_id": {
          "type": "integer",
          "format": "int32",
          "description": "Set to an email-type service id to require email confirmation to reset passwords, otherwise defaults to security question and answer."
        },
        "password_email_template_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default email template used for password reset email confirmations."
        },
        "guest_role_id": {
          "type": "integer",
          "format": "int32",
          "description": "Role Id assigned for all guest sessions, set to null to require authenticated sessions."
        },
        "editable_profile_fields": {
          "type": "string",
          "description": "Comma-delimited list of fields the user is allowed to edit."
        },
        "allowed_hosts": {
          "type": "Array",
          "description": "CORS whitelist of allowed remote hosts.",
          "items": {
            "$ref": "HostInfo"
          }
        },
        "dsp_version": {
          "type": "string",
          "description": "Version of the DSP software."
        },
        "db_version": {
          "type": "string",
          "description": "Version of the database schema."
        }
      }
    },
    "HostInfo": {
      "id": "HostInfo",
      "properties": {
        "host": {
          "type": "string",
          "description": "URL, server name, or * to define the CORS host."
        },
        "is_enabled": {
          "type": "boolean",
          "description": "Allow this host's configuration to be used by CORS."
        },
        "verbs": {
          "type": "Array",
          "description": "Allowed HTTP verbs for this host.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Constants": {
      "id": "Constants",
      "properties": {
        "type_name": {
          "type": "Array",
          "items": {
            "$ref": "Constant"
          }
        }
      }
    },
    "Constant": {
      "id": "Constant",
      "properties": {
        "name": {
          "type": "Array",
          "items": {
            "$ref": "string"
          }
        }
      }
    },
    "CustomSettings": {
      "id": "CustomSettings",
      "properties": {
        "type_name": {
          "type": "Array",
          "items": {
            "$ref": "CustomSetting"
          }
        }
      }
    },
    "CustomSetting": {
      "id": "CustomSetting",
      "properties": {
        "name": {
          "type": "Array",
          "items": {
            "$ref": "string"
          }
        }
      }
    },
    "DeviceRequest": {
      "id": "DeviceRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this device."
        },
        "uuid": {
          "type": "string",
          "description": "Unique ID generated by the device."
        },
        "platform": {
          "type": "string",
          "description": "Platform information of the device."
        },
        "version": {
          "type": "string",
          "description": "Version information of the device."
        },
        "model": {
          "type": "string",
          "description": "Model information of the device."
        },
        "extra": {
          "type": "string",
          "description": "Extra information from the device."
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the User using this device."
        },
        "user": {
          "type": "User",
          "description": "Related user by user_id."
        }
      }
    },
    "DeviceResponse": {
      "id": "DeviceResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this device."
        },
        "uuid": {
          "type": "string",
          "description": "Unique ID generated by the device."
        },
        "platform": {
          "type": "string",
          "description": "Platform information of the device."
        },
        "version": {
          "type": "string",
          "description": "Version information of the device."
        },
        "model": {
          "type": "string",
          "description": "Model information of the device."
        },
        "extra": {
          "type": "string",
          "description": "Extra information from the device."
        },
        "user_id": {
          "type": "integer",
          "format": "int32",
          "description": "Id of the User using this device."
        },
        "user": {
          "type": "User",
          "description": "Related user by user_id."
        },
        "created_date": {
          "type": "string",
          "description": "Date this device was created."
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this device was last modified."
        }
      }
    },
    "DevicesRequest": {
      "id": "DevicesRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system device records.",
          "items": {
            "$ref": "DeviceRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "DevicesResponse": {
      "id": "DevicesResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system device records.",
          "items": {
            "$ref": "DeviceResponse"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    },
    "EmailTemplateRequest": {
      "id": "EmailTemplateRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this email template."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this email template."
        },
        "description": {
          "type": "string",
          "description": "Description of this email template."
        },
        "to": {
          "type": "Array",
          "description": "Single or multiple receiver addresses.",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "cc": {
          "type": "Array",
          "description": "Optional CC receiver addresses.",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "bcc": {
          "type": "Array",
          "description": "Optional BCC receiver addresses.",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "subject": {
          "type": "string",
          "description": "Text only subject line."
        },
        "body_text": {
          "type": "string",
          "description": "Text only version of the body."
        },
        "body_html": {
          "type": "string",
          "description": "Escaped HTML version of the body."
        },
        "from": {
          "type": "EmailAddress",
          "description": "Required sender name and email."
        },
        "reply_to": {
          "type": "EmailAddress",
          "description": "Optional reply to name and email."
        },
        "defaults": {
          "type": "Array",
          "description": "Array of default name value pairs for template replacement.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmailTemplateResponse": {
      "id": "EmailTemplateResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this email template."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this email template."
        },
        "description": {
          "type": "string",
          "description": "Description of this email template."
        },
        "to": {
          "type": "Array",
          "description": "Single or multiple receiver addresses.",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "cc": {
          "type": "Array",
          "description": "Optional CC receiver addresses.",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "bcc": {
          "type": "Array",
          "description": "Optional BCC receiver addresses.",
          "items": {
            "$ref": "EmailAddress"
          }
        },
        "subject": {
          "type": "string",
          "description": "Text only subject line."
        },
        "body_text": {
          "type": "string",
          "description": "Text only version of the body."
        },
        "body_html": {
          "type": "string",
          "description": "Escaped HTML version of the body."
        },
        "from": {
          "type": "EmailAddress",
          "description": "Required sender name and email."
        },
        "reply_to": {
          "type": "EmailAddress",
          "description": "Optional reply to name and email."
        },
        "defaults": {
          "type": "Array",
          "description": "Array of default name value pairs for template replacement.",
          "items": {
            "type": "string"
          }
        },
        "created_date": {
          "type": "string",
          "description": "Date this email template was created."
        },
        "created_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who created this email template."
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this email template was last modified."
        },
        "last_modified_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who last modified this email template."
        }
      }
    },
    "EmailAddress": {
      "id": "EmailAddress",
      "properties": {
        "name": {
          "type": "string",
          "description": "Optional name displayed along with the email address."
        },
        "email": {
          "type": "string",
          "description": "Required email address."
        }
      }
    },
    "EmailTemplatesRequest": {
      "id": "EmailTemplatesRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system email template records.",
          "items": {
            "$ref": "EmailTemplateRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "EmailTemplatesResponse": {
      "id": "EmailTemplatesResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system email template records.",
          "items": {
            "$ref": "EmailTemplateResponse"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    },
    "RoleRequest": {
      "id": "RoleRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this role."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this role."
        },
        "description": {
          "type": "string",
          "description": "Description of this role."
        },
        "is_active": {
          "type": "boolean",
          "description": "Is this role active for use."
        },
        "default_app_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default launched app for this role."
        },
        "default_app": {
          "type": "App",
          "description": "Related app by default_app_id."
        },
        "users": {
          "type": "Array",
          "description": "Related users by User.role_id.",
          "items": {
            "type": "string"
          }
        },
        "apps": {
          "type": "Array",
          "description": "Related apps by role assignment.",
          "items": {
            "type": "string"
          }
        },
        "services": {
          "type": "Array",
          "description": "Related services by role assignment.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RoleResponse": {
      "id": "RoleResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this role."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this role."
        },
        "description": {
          "type": "string",
          "description": "Description of this role."
        },
        "is_active": {
          "type": "boolean",
          "description": "Is this role active for use."
        },
        "default_app_id": {
          "type": "integer",
          "format": "int32",
          "description": "Default launched app for this role."
        },
        "default_app": {
          "type": "App",
          "description": "Related app by default_app_id."
        },
        "users": {
          "type": "Array",
          "description": "Related users by User.role_id.",
          "items": {
            "type": "string"
          }
        },
        "apps": {
          "type": "Array",
          "description": "Related apps by role assignment.",
          "items": {
            "type": "string"
          }
        },
        "services": {
          "type": "Array",
          "description": "Related services by role assignment.",
          "items": {
            "type": "string"
          }
        },
        "created_date": {
          "type": "string",
          "description": "Date this role was created."
        },
        "created_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who created this role."
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this role was last modified."
        },
        "last_modified_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who last modified this role."
        }
      }
    },
    "RolesRequest": {
      "id": "RolesRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system role records.",
          "items": {
            "$ref": "RoleRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "RolesResponse": {
      "id": "RolesResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system role records.",
          "items": {
            "$ref": "RoleRequest"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    },
    "ServiceRequest": {
      "id": "ServiceRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this service."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this service."
        },
        "api_name": {
          "type": "string",
          "description": "Name of the service to use in API transactions."
        },
        "description": {
          "type": "string",
          "description": "Description of this service."
        },
        "is_active": {
          "type": "boolean",
          "description": "True if this service is active for use."
        },
        "type": {
          "type": "string",
          "description": "One of the supported service types.",
          "deprecated": true
        },
        "type_id": {
          "type": "integer",
          "format": "int32",
          "description": "One of the supported enumerated service types."
        },
        "storage_name": {
          "type": "string",
          "description": "The local or remote storage name (i.e. root folder)."
        },
        "storage_type": {
          "type": "string",
          "description": "They supported storage service type.",
          "deprecated": true
        },
        "storage_type_id": {
          "type": "integer",
          "format": "int32",
          "description": "One of the supported enumerated storage service types."
        },
        "credentials": {
          "type": "string",
          "description": "Any credentials data required by the service."
        },
        "native_format": {
          "type": "string",
          "description": "The format of the returned data of the service."
        },
        "base_url": {
          "type": "string",
          "description": "The base URL for remote web services."
        },
        "parameters": {
          "type": "string",
          "description": "Additional URL parameters required by the service."
        },
        "headers": {
          "type": "string",
          "description": "Additional headers required by the service."
        },
        "apps": {
          "type": "Array",
          "description": "Related apps by app to service assignment.",
          "items": {
            "$ref": "App"
          }
        },
        "roles": {
          "type": "Array",
          "description": "Related roles by service to role assignment.",
          "items": {
            "$ref": "Role"
          }
        }
      }
    },
    "ServiceResponse": {
      "id": "ServiceResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this service."
        },
        "name": {
          "type": "string",
          "description": "Displayable name of this service."
        },
        "api_name": {
          "type": "string",
          "description": "Name of the service to use in API transactions."
        },
        "description": {
          "type": "string",
          "description": "Description of this service."
        },
        "is_active": {
          "type": "boolean",
          "description": "True if this service is active for use."
        },
        "type": {
          "type": "string",
          "description": "One of the supported service types.",
          "deprecated": true
        },
        "type_id": {
          "type": "integer",
          "format": "int32",
          "description": "One of the supported enumerated service types."
        },
        "storage_name": {
          "type": "string",
          "description": "The local or remote storage name (i.e. root folder)."
        },
        "storage_type": {
          "type": "string",
          "description": "They supported storage service type.",
          "deprecated": true
        },
        "storage_type_id": {
          "type": "integer",
          "format": "int32",
          "description": "One of the supported enumerated storage service types."
        },
        "credentials": {
          "type": "string",
          "description": "Any credentials data required by the service."
        },
        "native_format": {
          "type": "string",
          "description": "The format of the returned data of the service."
        },
        "base_url": {
          "type": "string",
          "description": "The base URL for remote web services."
        },
        "parameters": {
          "type": "string",
          "description": "Additional URL parameters required by the service."
        },
        "headers": {
          "type": "string",
          "description": "Additional headers required by the service."
        },
        "apps": {
          "type": "Array",
          "description": "Related apps by app to service assignment.",
          "items": {
            "$ref": "App"
          }
        },
        "roles": {
          "type": "Array",
          "description": "Related roles by service to role assignment.",
          "items": {
            "$ref": "Role"
          }
        },
        "is_system": {
          "type": "boolean",
          "description": "True if this service is a default system service."
        },
        "created_date": {
          "type": "string",
          "description": "Date this service was created."
        },
        "created_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who created this service."
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this service was last modified."
        },
        "last_modified_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who last modified this service."
        }
      }
    },
    "ServicesRequest": {
      "id": "ServicesRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system service records.",
          "items": {
            "$ref": "ServiceRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "ServicesResponse": {
      "id": "ServicesResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system service records.",
          "items": {
            "$ref": "ServiceResponse"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    },
    "UserRequest": {
      "id": "UserRequest",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this user."
        },
        "email": {
          "type": "string",
          "description": "The email address required for this user."
        },
        "password": {
          "type": "string",
          "description": "The set-able, but never readable, password."
        },
        "first_name": {
          "type": "string",
          "description": "The first name for this user."
        },
        "last_name": {
          "type": "string",
          "description": "The last name for this user."
        },
        "display_name": {
          "type": "string",
          "description": "Displayable name of this user."
        },
        "phone": {
          "type": "string",
          "description": "Phone number for this user."
        },
        "is_active": {
          "type": "boolean",
          "description": "True if this user is active for use."
        },
        "is_sys_admin": {
          "type": "boolean",
          "description": "True if this user is a system admin."
        },
        "default_app_id": {
          "type": "string",
          "description": "The default launched app for this user."
        },
        "role_id": {
          "type": "string",
          "description": "The role to which this user is assigned."
        },
        "default_app": {
          "type": "App",
          "description": "Related app by default_app_id."
        },
        "role": {
          "type": "Role",
          "description": "Related role by role_id."
        }
      }
    },
    "UserResponse": {
      "id": "UserResponse",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Identifier of this user."
        },
        "email": {
          "type": "string",
          "description": "The email address required for this user."
        },
        "password": {
          "type": "string",
          "description": "The set-able, but never readable, password."
        },
        "first_name": {
          "type": "string",
          "description": "The first name for this user."
        },
        "last_name": {
          "type": "string",
          "description": "The last name for this user."
        },
        "display_name": {
          "type": "string",
          "description": "Displayable name of this user."
        },
        "phone": {
          "type": "string",
          "description": "Phone number for this user."
        },
        "is_active": {
          "type": "boolean",
          "description": "True if this user is active for use."
        },
        "is_sys_admin": {
          "type": "boolean",
          "description": "True if this user is a system admin."
        },
        "default_app_id": {
          "type": "string",
          "description": "The default launched app for this user."
        },
        "role_id": {
          "type": "string",
          "description": "The role to which this user is assigned."
        },
        "default_app": {
          "type": "App",
          "description": "Related app by default_app_id."
        },
        "role": {
          "type": "Role",
          "description": "Related role by role_id."
        },
        "last_login_date": {
          "type": "string",
          "description": "Timestamp of the last login."
        },
        "created_date": {
          "type": "string",
          "description": "Date this user was created."
        },
        "created_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who created this user."
        },
        "last_modified_date": {
          "type": "string",
          "description": "Date this user was last modified."
        },
        "last_modified_by_id": {
          "type": "integer",
          "format": "int32",
          "description": "User Id of who last modified this user."
        }
      }
    },
    "UsersRequest": {
      "id": "UsersRequest",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system user records.",
          "items": {
            "$ref": "UserRequest"
          }
        },
        "ids": {
          "type": "Array",
          "description": "Array of system record identifiers, used for batch GET, PUT, PATCH, and DELETE.",
          "items": {
            "$ref": "integer"
          }
        }
      }
    },
    "UsersResponse": {
      "id": "UsersResponse",
      "properties": {
        "record": {
          "type": "Array",
          "description": "Array of system user records.",
          "items": {
            "$ref": "UserResponse"
          }
        },
        "meta": {
          "type": "Metadata",
          "description": "Array of metadata returned for GET requests."
        }
      }
    }
  }
}